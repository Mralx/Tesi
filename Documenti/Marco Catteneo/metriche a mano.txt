3 possibili modi di considerare il grafo:
   1) ogni nodo[0, ..., t-1] è connesso anche alle frontiere scoperte al tempo t -> un arco indica che due nodi sono raggiungibili l'uno dall'altro
   2) ogni nodo è connesso solo alle frontiere che vede e a quelle scoperte precedentemente, ma inesplorate -> un arco non indica nessuna rappresentazione particolare
   3) ogni nodo è connesso solo alle frontiere che scopre -> un arco tra una frontiera e un nodo del grafo indica che quella frontiera è stata aggiunta da quella posizione

time elapsed - frontiere
6 (425,293) , (468,231) , (545,297) , (485,361)
7 (545,297) , (466,230) , (465,274) , (402,313) , (485,363)
8 (559,237) , (466,230) , (466,277) , (555,356) , (399,316) , (548,294) , (486,365) , (560,253)
9 (467,230) , (559,237) , (468,276) , (559,368) , (391,310) , (552,299) , (411,327) , (560,253) , (486,364)

edge connectivity
1) grafo dinamico = ogni nodo[0, ..., t-1] è connesso anche alle frontiere scoperte al tempo t, 
quindi l'analisi dovrebbe tenere conto anche dei nodi precedenti a quelli elencati sopra, ma qui considero solo questo sottografo 
	7: 3 frontiere viste da 6 restano (quasi) invariate, 1 scompare e ne vengono generate 2 => ec=2, due archi alla stessa frontiera 
	8: 5 frontiere precedenti invariate, ne genera 3 => ec=2, come sopra
	9: ec=2, come sopra
	
	In generale, ec_t=min(t,ec_(t-1)) infatti, ogni frontiera scoperta all'istante t sarà connessa anche ai nodi precedenti all'istante t, 
	il che significa che per disconnetterla dal grafo si dovranno rimuovere t archi. 
	Per tale ragione: 
		se viene scoperta una frontiera, essa sarà collegata a t nodi, quindi ec_t=ec_(t-1);
		se le frontiere restano le stesse di quelle del passo precedente, ec_t = ec_k con k < t;
		se almeno una frontiera viene esplorata, essa avrà al più t-1 connessioni, quindi ec_t = min(t-1, ec_(t-1)).

2) grafo statico = ogni nodo è connesso solo alle frontiere che vede e a quelle scoperte precedentemente, ma inesplorate
	7: ec=1, le 2 frontiere appena scoperte sono connesse solo al nodo 7 e non al 6
	8: ec=1, come sopra per le 3 nuove frontiere
	9: ec=1, come sopra

	In generale, 3 casi riconducibili a 2:
	1) vengono scoperte nuove frontiere -> ec=1 poichè sono connesse solamente al nodo al tempo t
	2) frontiere invariate -> ec=1+k poiché connesse a tutti i nodi da quello a tempo t fino a quello a tempo t-k, il quale è il primo a scoprire quella frontiera
	3) vengono esplorate delle frontiere -> ec=t-k-1 poichè sono connesse solamente al nodo a t-1 (e i suoi predecessori fino al primo nodo nel quale si scopre
	tale frontiera) e non a quello t, quindi è come il caso 1 


vertex connectivity
1) dinamico
	in ogni caso, vc_t = t. L'unica eccezione è il caso in cui il nodo t fosse una frontiera a t-1 ed a t è stata esplorata senza scoprire nessun'altra frontiera.
	In tal caso infatti la vc_t = vc_(t-1).
2) statico
	6: grafo a stella, rimuovendo il nodo 6, il grafo diventa disconnesso => vc = 1 
	7: 3 frontiere invariate dal nodo 6, 1 scompare e 2 generate -> rimuovendo 6 o 7 disconnetto il grafo => vc = 1
	8: 5 frontiere precedenti invariate, ne genera 3 -> rimuovendo 6 o 8  disconnetto il grafo => vc = 1
	9: vc = 1, come sopra

	In generale, 
		se si scopre almeno una frontiera, vc_t = 1 poiché basterà rimuovere il nodo t;
		altrimenti (= non vengono scoperte nuove frontiere), vc_t = 1 + vc_(t-1), equivalente al rimuovere il nodo t e ricondursi al caso a t-1.

closeness centrality
Per un grafo g, è definita come il vettore (1/l_1,1/l_2,...), dove l_i è la distanza media dal nodo i ad ogni altro nodo connesso ad i. Qui la distanza è calcolata 
semplicemente come la distanza euclidea tra due nodi. Di fatto sarà una sottostima della distanza, pertanto la misura di centralità sarà una sottostima di quella reale.
2) statico per semplicità nel calcolo
	d(2,3) = d(3,4) = d(4,5) = 9.9 d(5,6) = 9.2 d(6,7) = 10 d(7,8) = 9.4 d(8,9) = d(9,10) = 9.9 
	2 = [570,180] f2 = [(647,177) , (523,233) , (468,231) , (444,278) ] d(2,f2) = [77, 70.1, 114, 159.6]
	3 = [563,187] f3 = [(523,235) , (468,231) , (438,282) ] d(3,f3) = [62.5, 104.7, 157]
	4 = [556,194] f4 = [(523,240) , (468,231) , (434,285) ] d(4,f4) = [56.6, 95.6, 152.2]
	5 = [549,201] f5 = [(522,261) , (468,231) , (429,288) ] d(5,f5) = [65.8, 86.4, 148.2]
	6 = [540,203] f6 = [(425,293) , (468,231) , (545,297) , (485,361) ] d(6,f6) = [146, 77.3, 94.1, 167.3]
	7 = [530,203] f7 = [(545,297) , (466,230) , (465,274) , (402,313) , (485,363) ] d(7,f7) = [95.2, 69.5, 96.3, 168.8, 166.2]
	8 = [522,208] f8 = [(559,237) , (466,230) , (466,277) , (555,356) , (399,316) , (548,294) , (486,365) , (560,253) ] d(8,f8) = [47, 60.2, 88.9, 151.6, 163.7, 89.9, 161.1, 58.9]
	9 = [515,215] f9 = [(467,230) , (559,237) , (468,276) , (559,368) , (391,310) , (552,299) , (411,327) , (560,253) , (486,364) ] d(9,f9) = [50.3, 49.2, 77, 159.2, 156.2, 91.8, 152.8, 58.9, 151.8]
	
	closeness al tempo t= 
	6 : []
	7 : []
	8 : []
	9 : []